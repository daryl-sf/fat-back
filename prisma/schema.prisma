datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password     Password?
  notes        Note[]
  leagueUsers  LeagueUser[]
  leagueAdmins LeagueAdmin[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model League {
  id           String        @id @default(cuid())
  name         String
  leagueUsers  LeagueUser[]
  leagueAdmins LeagueAdmin[]
  inviteCode   String        @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LeagueUser {
  id String @id @default(cuid())

  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  leagueId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LeagueAdmin {
  id String @id @default(cuid())

  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  leagueId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
